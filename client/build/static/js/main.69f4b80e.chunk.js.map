{"version":3,"sources":["utils/auth.js","components/Header/index.js","components/Footer/index.js","components/FriendList/index.js","utils/queries.js","components/Thoughtlist/index.js","utils/mutations.js","components/ThoughtForm/index.js","pages/Home.js","pages/Login.js","pages/NoMatch.js","components/ReactionList/index.js","components/ReactionForm/index.js","pages/SingleThought.js","pages/Profile.js","pages/Signup.js","components/AnimeCard/index.js","components/AnimeList/index.js","components/WatchList/index.js","pages/MyAnime.js","App.js","serviceWorker.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Header","className","to","Auth","loggedIn","href","onClick","event","preventDefault","logout","Footer","id","target","rel","FriendList","friendCount","username","friends","length","map","friend","_id","QUERY_THOUGHTS","gql","QUERY_THOUGHT","QUERY_USER","QUERY_ME","QUERY_ME_BASIC","ThoughtList","thoughts","title","thought","style","fontWeight","createdAt","thoughtText","reactionCount","LOGIN_USER","ADD_USER","ADD_THOUGHT","ADD_REACTION","ADD_FRIEND","ADD_ANIME","ThoughtForm","useState","setText","characterCount","setCharacterCount","useMutation","update","cache","addThought","data","readQuery","query","writeQuery","e","console","error","me","handleFormSubmit","a","variables","alert","onSubmit","placeholder","value","onChange","type","Home","useQuery","loading","userData","Login","props","email","password","formState","setFormState","login","handleChange","name","NoMatch","ReactionList","reactions","reaction","reactionBody","ReactionForm","thoughtId","setBody","addReaction","SingleThought","useParams","Profile","addFriend","userParam","user","getProfile","handleClick","Signup","addUser","AnimeCard","anime","addAnime","log","rated","animeText","animeEpisodes","reload","url","src","image_url","alt","episodes","AnimeList","HandleSearch","required","search","SetSearch","animeList","mal_id","WatchList","animes","MyAnime","SetAnimeList","FetchAnime","fetch","then","res","json","temp","results","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","InMemoryCache","App","ApolloProvider","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.69f4b80e.chunk.js","sourcesContent":["import decode from 'jwt-decode';\n\nclass AuthService {\n    // retrieve data saved in token\n    getProfile() {\n      return decode(this.getToken());\n    }\n  \n    // check if the user is still logged in\n    loggedIn() {\n      // Checks if there is a saved token and it's still valid\n      const token = this.getToken();\n      // use type coersion to check if token is NOT undefined and the token is NOT expired\n      return !!token && !this.isTokenExpired(token);\n    }\n  \n    // check if the token has expired\n    isTokenExpired(token) {\n      try {\n        const decoded = decode(token);\n        if (decoded.exp < Date.now() / 1000) {\n          return true;\n        } else {\n          return false;\n        }\n      } catch (err) {\n        return false;\n      }\n    }\n  \n    // retrieve token from localStorage\n    getToken() {\n      // Retrieves the user token from localStorage\n      return localStorage.getItem('id_token');\n    }\n  \n    // set token to localStorage and reload page to homepage\n    login(idToken) {\n      // Saves user token to localStorage\n      localStorage.setItem('id_token', idToken);\n  \n      window.location.assign('/');\n    }\n  \n    // clear token from localStorage and force logout with reload\n    logout() {\n      // Clear user token and profile data from localStorage\n      localStorage.removeItem('id_token');\n      // this will reload the page and reset the state of the application\n      window.location.assign('/');\n    }\n  }\n\nexport default new AuthService();","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Auth from \"../../utils/auth\";\nimport '../Header/styles.css';\n\nconst Header = () => {\n  const logout = (event) => {\n    event.preventDefault();\n    Auth.logout();\n  };\n\n  return (\n    <header className=\"mb-4 py-2 flex-row align-center\">\n      <div className=\"container flex-row justify-space-between-lg justify-center align-center\">\n        <Link to=\"/\">\n          <h1>KISS ANIME / キスアニメ </h1>\n          <h4>FROM THE ASHES REBORN</h4>\n        </Link>\n\n        <nav className=\"text-center susi\">\n          {Auth.loggedIn() ? (\n            <>\n              <Link to=\"/profile\">Me</Link>\n              <Link to=\"/MyAnime\">My Anime</Link>\n              <a href=\"/\" onClick={logout}>\n                Logout\n              </a>\n            </>\n          ) : (\n            <>\n              <Link to=\"/login\">Login</Link>\n              <Link to=\"/signup\">Signup</Link>\n            </>\n          )}\n        </nav>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport './style.css';\n\nconst Footer = () => {\n  return (\n    <footer className=\"w-100 mt-auto bg-secondary p-4 footer\">\n      <div className=\"container\">\n        <p id='footer-content'>\n        &copy;2021 by\n        <a href=\"https://github.com/bgerner\" target=\"_blank\" rel=\"noreferrer\"> Ben Gerner </a>\n        /\\\n        <a href=\"https://github.com/RotichD\" target=\"_blank\" rel=\"noreferrer\"> Dylan Rotich </a>\n        /\\\n        <a href=\"https://github.com/d-trecker\" target=\"_blank\" rel=\"noreferrer\"> Dylan Trecker </a>\n        /\\\n        <a href=\"https://github.com/thisEmcee\" target=\"_blank\" rel=\"noreferrer\"> Michael Chambers </a>\n        /\\\n        <a href=\"https://github.com/theoneandonlyzako\" target=\"_blank\" rel=\"noreferrer\"> Zak Stamps </a>\n        </p>\n        </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst FriendList = ({ friendCount, username, friends }) => {\n  if (!friends || !friends.length) {\n    return <p className=\"bg-dark text-light p-3\">{username}, make some friends!</p>;\n  }\n\n  return (\n    <div>\n      <h5>\n        {username} is {friendCount === 1 ? 'following' : 'following'} {friendCount} users\n      </h5>\n      {friends.map(friend => (\n        <button className=\"btn w-100 display-block mb-2\" key={friend._id}>\n          <Link to={`/profile/${friend.username}`}>{friend.username}</Link>\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default FriendList;","import { gql } from '@apollo/client';\n\nexport const QUERY_THOUGHTS = gql`\n  query thoughts($username: String) {\n    thoughts(username: $username) {\n      _id\n      thoughtText\n      createdAt\n      username\n      reactionCount\n      reactions {\n        _id\n        createdAt\n        username\n        reactionBody\n      }\n    }\n  }\n`;\n\nexport const QUERY_THOUGHT = gql`\n  query thought($id: ID!) {\n    thought(_id: $id) {\n      _id\n      thoughtText\n      createdAt\n      username\n      reactionCount\n      reactions {\n        _id\n        createdAt\n        username\n        reactionBody\n      }\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  query user($username: String!) {\n    user(username: $username) {\n      _id\n      username\n      email\n      friendCount\n      friends {\n        _id\n        username\n      }\n      thoughts {\n        _id\n        thoughtText\n        createdAt\n        reactionCount\n      }\n      animes {\n        _id\n        animeText\n        animeEpisodes\n        createdAt\n      }\n    }\n  }\n`;\n\nexport const QUERY_ME = gql`\n  {\n    me {\n      _id\n      username\n      email\n      friendCount\n      thoughts {\n        _id\n        thoughtText\n        createdAt\n        reactionCount\n        reactions {\n          _id\n          createdAt\n          reactionBody\n          username\n        }\n      }\n      friends {\n        _id\n        username\n      }\n      animes {\n        _id\n        animeText\n        animeEpisodes\n        createdAt\n      }\n    }\n  }\n`;\n\nexport const QUERY_ME_BASIC = gql`\n  {\n    me {\n      _id\n      username\n      email\n      friendCount\n      friends {\n        _id\n        username\n      }\n      animes { \n        _id\n        animeText\n        animeEpisodes\n      }\n    }\n  }\n`;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst ThoughtList = ({ thoughts, title }) => {\n  if (!thoughts.length) {\n    return <h3>No Thoughts Yet</h3>;\n  }\n\n  return (\n    <div>\n      <h3>{title}</h3>\n      {thoughts &&\n        thoughts.map((thought) => (\n          <div key={thought._id} className=\"card mb-3\">\n            <p className=\"card-header\">\n              <Link\n                to={`/profile/${thought.username}`}\n                style={{ fontWeight: 700 }}\n                className=\"text-light\"\n              >\n                {thought.username}\n              </Link>{\" \"}\n              thought on {thought.createdAt}\n            </p>\n            <div className=\"card-body\">\n              <Link to={`/thought/${thought._id}`}>\n                <p>{thought.thoughtText}</p>\n                <p className=\"mb-0\">\n                  Reactions: {thought.reactionCount} || Click to{\" \"}\n                  {thought.reactionCount ? \"see\" : \"start\"} the discussion!\n                </p>\n              </Link>\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default ThoughtList;\n","import { gql } from \"@apollo/client\";\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_THOUGHT = gql`\n  mutation addThought($thoughtText: String!) {\n    addThought(thoughtText: $thoughtText) {\n      _id\n      thoughtText\n      createdAt\n      username\n      reactionCount\n      reactions {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_REACTION = gql`\n  mutation addReaction($thoughtId: ID!, $reactionBody: String!) {\n    addReaction(thoughtId: $thoughtId, reactionBody: $reactionBody) {\n      _id\n      reactionCount\n      reactions {\n        _id\n        reactionBody\n        createdAt\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_FRIEND = gql`\n  mutation addFriend($id: ID!) {\n    addFriend(friendId: $id) {\n      _id\n      username\n      friendCount\n      friends {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const REMOVE_FRIEND = gql`\n  mutation removeFriend($id: ID!) {\n    removeFriend(id: $id) {\n      _id\n      username\n      friends {\n        _id\n        username\n      }\n    }\n  }\n`;\nexport const ADD_ANIME = gql`\n  mutation addAnime($animeText: String!, $animeEpisodes: String!) {\n    addAnime(animeText: $animeText, animeEpisodes:$animeEpisodes) {\n      _id\n      animeText\n      animeEpisodes\n      createdAt\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_THOUGHT } from \"../../utils/mutations\";\nimport { QUERY_THOUGHTS, QUERY_ME } from '../../utils/queries';\nimport './styles.css'\n\nconst ThoughtForm = () => {\n  const [thoughtText, setText] = useState(\"\");\n  const [characterCount, setCharacterCount] = useState(0);\n  const [addThought, { error }] = useMutation(ADD_THOUGHT, {\n    update(cache, { data: { addThought } }) {\n      try {\n        // could potentially not exist yet, so wrap in a try...catch\n        const { thoughts } = cache.readQuery({ query: QUERY_THOUGHTS });\n        cache.writeQuery({\n          query: QUERY_THOUGHTS,\n          data: { thoughts: [addThought, ...thoughts] }\n        });\n      } catch (e) {\n        console.error(e);\n      }\n  \n      // update me object's cache, appending new thought to the end of the array\n      const { me } = cache.readQuery({ query: QUERY_ME });\n      cache.writeQuery({\n        query: QUERY_ME,\n        data: { me: { ...me, thoughts: [...me.thoughts, addThought] } }\n      });\n    }\n  });\n\n\n  const handleChange = (event) => {\n    if (event.target.value.length <= 280) {\n      setText(event.target.value);\n      setCharacterCount(event.target.value.length);\n    }\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      // add thought to database\n      await addThought({\n        variables: { thoughtText },\n      });\n      alert('One more Anime to share with your followers!')\n      // clear form value\n      setText(\"\");\n      setCharacterCount(0);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <div>\n      <p\n        className={`m-0 ${characterCount === 280 || error ? \"text-error\" : \"\"}`}\n      >\n        Character Count: {characterCount}/280\n        {error && <span className=\"ml-2\">Oops something went wrong...</span>}\n      </p>\n      <form\n        className=\"flex-row justify-center justify-space-between-md align-stretch\"\n        onSubmit={handleFormSubmit}\n      >\n        <textarea\n          placeholder=\"Here's a new Anime...\"\n          value={thoughtText}\n          className=\"form-input col-12 col-md-9\"\n          onChange={handleChange}\n        ></textarea>\n        <button className=\"btn col-12 col-md-3\" id=\"submittt\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ThoughtForm;\n","import React from \"react\";\nimport Auth from \"../utils/auth\";\nimport FriendList from \"../components/FriendList\";\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_THOUGHTS, QUERY_ME_BASIC } from \"../utils/queries\";\nimport ThoughtList from \"../components/Thoughtlist\";\nimport ThoughtForm from \"../components/ThoughtForm\";\n\nconst Home = () => {\n  //user useQuery hook to make query request\n  const { loading, data } = useQuery(QUERY_THOUGHTS);\n  // use object destructuring to extract `data` from the `useQuery` Hook's response and rename it `userData` to be more descriptive\n  const { data: userData } = useQuery(QUERY_ME_BASIC);\n  const thoughts = data?.thoughts || [];\n  // console.log(thoughts);\n  const loggedIn = Auth.loggedIn();\n\n  return (\n    <main>\n      <div className=\"flex-row justify-space-between\">\n        {loggedIn && (\n          <div className=\"col-12 mb-3\">\n            <ThoughtForm />\n          </div>\n        )}\n        <div className={`col-12 mb-3 ${loggedIn && \"col-lg-8\"}`}>\n          {loading ? (\n            <div>Loading...</div>\n          ) : (\n            <ThoughtList\n              thoughts={thoughts}\n              title=\"This is very anime, wouldn't you say?\"\n            />\n          )}\n        </div>\n        {loggedIn && userData ? (\n          <div className=\"col-12 col-lg-3 mb-3\">\n            <FriendList\n              username={userData.me.username}\n              friendCount={userData.me.friendCount}\n              friends={userData.me.friends}\n            />\n          </div>\n        ) : null}\n      </div>\n    </main>\n  );\n};\n\nexport default Home;\n","import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN_USER } from \"../utils/mutations\";\nimport Auth from '../utils/auth';\n\nconst Login = props => {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  // update state based on form input changes\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      const { data } = await login({\n        variables: { ...formState }\n      });\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      email: '',\n      password: ''\n    });\n  };\n\n  return (\n    <main className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-md-6\">\n        <div className=\"card\">\n          <h4 className=\"card-header\">Login</h4>\n          <div className=\"card-body\">\n            <form onSubmit={handleFormSubmit}>\n              <input\n                className=\"form-input\"\n                placeholder=\"Your email\"\n                name=\"email\"\n                type=\"email\"\n                id=\"email\"\n                value={formState.email}\n                onChange={handleChange}\n              />\n              <input\n                className=\"form-input\"\n                placeholder=\"******\"\n                name=\"password\"\n                type=\"password\"\n                id=\"password\"\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button className=\"btn d-block w-100\" type=\"submit\">\n                Submit\n              </button>\n            </form>\n\n            {error && <div>Login failed</div>}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Login;\n","import React from 'react';\n\nconst NoMatch = () => {\n  return (\n    <div>\n      Oops, we couldn't find that page.\n    </div>\n  );\n};\n\nexport default NoMatch;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst ReactionList = ({ reactions }) => {\n  return (\n    <div className=\"card mb-3\">\n      <div className=\"card-header\">\n        <span className=\"text-light\">Reactions</span>\n      </div>\n      <div className=\"card-body\">\n        {reactions &&\n          reactions.map((reaction) => (\n            <p className=\"pill mb-3\" key={reaction._id}>\n              {reaction.reactionBody} {\"// \"}\n              <Link\n                to={`/profile/${reaction.username}`}\n                style={{ fontWeight: 700 }}\n              >\n                {reaction.username} on {reaction.createdAt}\n              </Link>\n            </p>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ReactionList;\n","import React, { useState } from \"react\";\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_REACTION } from '../../utils/mutations';\n\nconst ReactionForm = ({ thoughtId }) => {\n    const [reactionBody, setBody] = useState('');\n    const [characterCount, setCharacterCount] = useState(0);\n    const [addReaction, { error }] = useMutation(ADD_REACTION);\n  \n    // update state based on form input changes\n    const handleChange = event => {\n      if (event.target.value.length <= 280) {\n        setBody(event.target.value);\n        setCharacterCount(event.target.value.length);\n      }\n    };\n  \n    // submit form\n    const handleFormSubmit = async event => {\n      event.preventDefault();\n  \n      try {\n        await addReaction({\n          variables: { reactionBody, thoughtId }\n        });\n  \n        // clear form value\n        setBody('');\n        setCharacterCount(0);\n        alert('Reaction has been made!')\n      } catch (e) {\n        console.error(e);\n      }\n    };\n\n  return (\n    <div>\n      <p\n        className={`m-0 ${characterCount === 280 || error ? \"text-error\" : \"\"}`}\n      >\n        Character Count: {characterCount}/280\n        {error && <span className=\"ml-2\">Something went wrong...</span>}\n      </p>\n      <form\n        className=\"flex-row justify-center justify-space-between-md align-stretch\"\n        onSubmit={handleFormSubmit}\n      >\n        <textarea\n          placeholder=\"Leave a reaction to this thought...\"\n          value={reactionBody}\n          className=\"form-input col-12 col-md-9\"\n          onChange={handleChange}\n        ></textarea>\n\n        <button className=\"btn col-12 col-md-3\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ReactionForm;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_THOUGHT } from \"../utils/queries\";\nimport ReactionList from \"../components/ReactionList\";\nimport ReactionForm from '../components/ReactionForm';\nimport Auth from \"../utils/auth\";\n\n\nconst SingleThought = (props) => {\n  const { id: thoughtId } = useParams();\n\n  const { loading, data } = useQuery(QUERY_THOUGHT, {\n    variables: { id: thoughtId },\n  });\n\n  const thought = data?.thought || {};\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n  return (\n    <div>\n      <div className=\"card mb-3\">\n        <p className=\"card-header\">\n          <span style={{ fontWeight: 700 }} className=\"text-light\">\n            {thought.username}\n          </span>{\" \"}\n          thought on {thought.createdAt}\n        </p>\n        <div className=\"card-body\">\n          <p>{thought.thoughtText}</p>\n        </div>\n      </div>\n\n      {thought.reactionCount > 0 && (\n        <ReactionList reactions={thought.reactions} />\n      )}\n      {Auth.loggedIn() && <ReactionForm thoughtId={thought._id} />}\n    </div>\n  );\n};\n\nexport default SingleThought;\n","import React from \"react\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport Auth from \"../utils/auth\";\nimport ThoughtList from \"../components/Thoughtlist\";\nimport FriendList from \"../components/FriendList\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { QUERY_USER, QUERY_ME } from \"../utils/queries\";\nimport { ADD_FRIEND } from \"../utils/mutations\";\nimport ThoughtForm from '../components/ThoughtForm';\n\nconst Profile = () => {\n  const [addFriend] = useMutation(ADD_FRIEND);\n  const { username: userParam } = useParams();\n\n  const { loading, data } = useQuery(userParam ? QUERY_USER : QUERY_ME, {\n    variables: { username: userParam },\n  });\n\n  const user = data?.me || data?.user || {};\n\n  // redirect to personal profile page if username is the logged-in user's\n  if (Auth.loggedIn() && Auth.getProfile().data.username === userParam) {\n    return <Redirect to=\"/profile\" />;\n  }\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!user?.username) {\n    return (\n      <h4>\n        You need to be logged in to see this page. Use the navigation links\n        above to sign up or log in!\n      </h4>\n    );\n  }\n\n  const handleClick = async () => {\n    try {\n      await addFriend({\n        variables: { id: user._id },\n      });\n      alert('One more friend to share life with!')\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"flex-row mb-3\">\n        <h2 className=\"profile-title text-secondary p-3 display-inline-block\">\n         {userParam ? `${user.username}'s` : \"Your\"} profile\n        </h2>\n        {userParam && (\n          <button className=\"btn ml-auto\" onClick={handleClick}>\n            Follow {userParam ? `${user.username}` : \"User\"}\n          </button>\n        )}\n      </div>\n      <div className=\"mb-3\">{!userParam && <ThoughtForm />}</div>\n\n      <div className=\"flex-row justify-space-between mb-3\">\n        <div className=\"col-12 mb-3 col-lg-8\">\n          <ThoughtList\n            thoughts={user.thoughts}\n            title={`${user.username}'s thoughts...`}\n          />\n        </div>\n\n        <div className=\"col-12 col-lg-3 mb-3\">\n          <FriendList\n            username={user.username}\n            friendCount={user.friendCount}\n            friends={user.friends}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst Signup = () => {\n  const [formState, setFormState] = useState({ username: '', email: '', password: '' });\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    \n    //use try/catch instead of promises to handle errors\n    try {\n      //execute addUser mutation and pass in variable data from form\n      const { data } = await addUser({\n        variables: {...formState }\n      });\n      Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <main className='flex-row justify-center mb-4'>\n      <div className='col-12 col-md-6'>\n        <div className='card'>\n          <h4 className='card-header'>Sign Up</h4>\n          <div className='card-body'>\n            <form onSubmit={handleFormSubmit}>\n              <input\n                className='form-input'\n                placeholder='Your username'\n                name='username'\n                type='username'\n                id='username'\n                value={formState.username}\n                onChange={handleChange}\n              />\n              <input\n                className='form-input'\n                placeholder='Your email'\n                name='email'\n                type='email'\n                id='email'\n                value={formState.email}\n                onChange={handleChange}\n              />\n              <input\n                className='form-input'\n                placeholder='******'\n                name='password'\n                type='password'\n                id='password'\n                value={formState.password}\n                onChange={handleChange}\n              />\n              <button className='btn d-block w-100' type='submit'>\n                Submit\n              </button>\n            </form>\n            {error && <div>Sign up failed</div>}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Signup;\n","import React from \"react\";\nimport { useMutation } from \"@apollo/client\";\n// import { useParams } from \"react-router\";\nimport { ADD_ANIME } from \"../../utils/mutations\";\n// import { QUERY_USER, QUERY_ME } from \"../../utils/queries\";\nimport './styles.css'\n\nfunction AnimeCard({ anime }) {\n  const [addAnime] = useMutation(ADD_ANIME);\n  // const { username: userParam } = useParams();\n\n  // const { loading, data } = useQuery(userParam ? QUERY_USER : QUERY_ME, {\n  //   variables: { username: userParam },\n  // });\n\n  // const user = data?.me || data?.user || {};\n\n  const handleClick = async () => {\n    console.log(anime.title);\n    console.log(anime.rated);\n    try {\n      await addAnime({\n        variables: { animeText:anime.title, animeEpisodes:anime.rated },\n      });\n      alert(\"DANGER! YOU'VE ADDED ANOTHER ANIME!\");\n      window.location.reload();\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <article className=\"anime-card\">\n      <figure>\n        <a href={anime.url} target=\"_blank\" rel=\"noreferrer\">\n          <img src={anime.image_url} alt=\"Anime Cover\" />\n        </a>\n      </figure>\n      <h3>{anime.title}</h3>\n      <p>Number of Episodes: {anime.episodes}</p>\n      \n        <button className=\"btn ml-auto\" onClick={handleClick}>\n          Add to Watch List\n        </button>\n\n    </article>\n  );\n}\n\nexport default AnimeCard;\n","import React from \"react\";\nimport AnimeCard from \"../AnimeCard\";\nimport './styles.css'\n\nfunction AnimeList(props) {\n  return (\n    <div>\n      <form className=\"searchBox\" onSubmit={props.HandleSearch}>\n        <input\n          className=\"search\"\n          type=\"search\"\n          placeholder=\"Search for an anime\"\n          required\n          value={props.search}\n          onChange={(e) => props.SetSearch(e.target.value)}\n        />\n        <button className=\"searchAnimeBtn d-block w-100\" type=\"submit\">\n                Submit\n        </button>\n      </form>\n      <div className=\"anime-list\">\n        {props.animeList.map((anime) => (\n          <AnimeCard anime={anime} key={anime.mal_id}></AnimeCard>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default AnimeList;\n","import React from 'react';\n\n\nconst WatchList = ({ username, animes }) => {\n    if (!animes || !animes.length) {\n      return <p className=\"bg-dark text-light p-3\">{username}, go watch some animes!</p>;\n    }\n  \n    return (\n      <div>\n        {animes.map(anime => (\n          <div className=\"btn w-100 display-block mb-2\" key={anime._id}>\n            {anime.animeText} {anime.animeEpisodes}\n          </div>\n        ))}\n      </div>\n    );\n  };\n  \n  export default WatchList;","import React, { useState } from \"react\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport Auth from \"../utils/auth\";\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_USER, QUERY_ME, QUERY_ME_BASIC } from \"../utils/queries\";\nimport AnimeList from \"../components/AnimeList\";\nimport WatchList from \"../components/WatchList\";\n\nconst MyAnime = () => {\n  const [animeList, SetAnimeList] = useState([]);\n  const [search, SetSearch] = useState(\"\");\n\n  const { data: userData } = useQuery(QUERY_ME_BASIC);\n\n  const { username: userParam } = useParams();\n\n  const { loading, data } = useQuery(userParam ? QUERY_USER : QUERY_ME, {\n    variables: { username: userParam },\n  });\n\n  const user = data?.me || data?.user || {};\n\n  // redirect to personal MyAnime page if username is the logged-in user's\n  if (Auth.loggedIn() && Auth.getProfile().data.username === userParam) {\n    return <Redirect to=\"/MyAnime\" />;\n  }\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!user?.username) {\n    return (\n      <h4>\n        You need to be logged in to see this page. Use the navigation links\n        above to sign up or log in!\n      </h4>\n    );\n  }\n\n  const HandleSearch = (e) => {\n    e.preventDefault();\n    FetchAnime(search);\n    // console.log(search);\n  };\n\n  const FetchAnime = async (query) => {\n    const temp = await fetch(`https://api.jikan.moe/v3/search/anime?q=${query}\n          &order_by=title&sort=asc&limit=10`).then((res) => res.json());\n    console.log(temp.results);\n    SetAnimeList(temp.results);\n  };\n\n  return (\n    <div>\n      <AnimeList\n        HandleSearch={HandleSearch}\n        search={search}\n        SetSearch={SetSearch}\n        animeList={animeList}\n      />\n      <WatchList username={userData.me.username} animes={userData.me.animes} />\n    </div>\n  );\n};\n\nexport default MyAnime;\n","import {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport React from \"react\";\n\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport NoMatch from \"./pages/NoMatch\";\nimport SingleThought from \"./pages/SingleThought\";\nimport Profile from \"./pages/Profile\";\nimport Signup from \"./pages/Signup\";\nimport MyAnime from \"./pages/MyAnime\"\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-flex-start min-100-vh\">\n          <Header />\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/profile/:username?\" component={Profile} />\n              <Route exact path=\"/MyAnime/:username?\" component={MyAnime} />\n              <Route exact path=\"/thought/:id\" component={SingleThought} />\n\n              <Route component={NoMatch} />\n            </Switch>\n          </div>\n          <Footer />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}